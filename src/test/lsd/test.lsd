#!/usr/bin/env lsd

if (args.size() != 2) {
    println "USAGE: ./src/test/lsd/test.lsd <container> <path>"
    println "EXAMPLE"
    println "    ./src/test/lsd/test.lsd fdr /var/corpora/FDR"
    return
}

VERSION = new File('VERSION').text
CONTAINER=args[0]
DIR=args[1]

if (!CONTAINER) {
    println "No container name provided."
    return
}
void prettyPrint(String json) {
	println groovy.json.JsonOutput.prettyPrint(json)
}

boolean shutdown = false
if (!isRunning(CONTAINER)) {
    println "Starting the docker container $CONTAINER."
    String cmd = "docker run -d -p 8080:8080 --name $CONTAINER -v $DIR:/var/lib/datasource lappsgrid/generic-datasource"
    println cmd
    String result = cmd.execute().text
    if (! result || result.size() == 0) {
        println 'Unable to start the Docker container.'
        return
    }
    shutdown = true
    print "Giving Tomcat time to spin up web services"
    10.times {
        print '...zzz'
        Thread.sleep(1000)
    }
    println ''
}
else {
    println "GenericDatasource is already running."
    println "docker ps".execute().text
}

String url = "http://localhost:8080/GenericDatasource/$VERSION/services/GenericDatasource"
ServiceClient service = new ServiceClient(url)
String json = service.getMetadata()
prettyPrint json
//return

Data data = new Data()
data.discriminator = Uri.LIST
data.payload = [start:0, end:145]
json = data.asJson()
json = service.execute(json)
//println json
prettyPrint json
data = Serializer.parse(json, Data)

int expectedSize = 0
new File(DIR).eachFile { File f ->
    if (!f.name.startsWith('.')) {
        ++expectedSize
    }
}
assert expectedSize == data.payload.size()
def index = data.payload

println index[0]
json = service.execute(new Data(Uri.GET, index[0]).asJson())
println "Execution complete."
println json
assert json != null
assert json.size() > 0
data = Serializer.parse(json)
println data.discriminator

//json = data.asJson())
//data = Serializer.parse(json, Data)
assert data.payload, Uri.LIF == data.discriminator //: data.payload
//println data.discriminator
//println data.payload
println "All tests passed."

boolean isRunning(String image) {
	"docker ps".execute().text.contains(image)
}
